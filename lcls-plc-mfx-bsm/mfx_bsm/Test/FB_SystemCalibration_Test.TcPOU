<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_SystemCalibration_Test" Id="{2c327392-2f50-4f5f-a2d3-d7e83eb579c1}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_SystemCalibration_Test EXTENDS FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
GivenThatAllFourCornersHaveBeenSetExpectTheSystemToBeCalibrated();
GivenThatAllThreeCornersHaveBeenSetExpectTheSystemNotToBeCalibrated();
GivenThatSystemIsCalibratedAndClearOneIsSetExpectTheSystemNotToBeCalibrated();
]]></ST>
    </Implementation>
    <Method Name="AllPrerequisitesFulfilledAcceptSave" Id="{c49330a4-fa44-47b5-9f8a-2b72ae87faa5}">
      <Declaration><![CDATA[
METHOD PRIVATE AllPrerequisitesFulfilledAcceptSave
VAR
    fbSystemCalibrationTestDouble : FB_SystemCalibrationTestDouble;
    fbGridScanPoints : FB_GridScanPoints(iSystemCalibration := fbSystemCalibrationTestDouble,
                                         nWindowMin := 2,
                                         nWindowMax := 5,
                                         fRotationStartAngleMin := 0.0,
                                         fRotationStartAngleMax  := 90.0,
                                         fRotationStopAngleMin := 0.0,
                                         fRotationStopAngleMax := 90.0,
                                         fOscillationVelocityMin := 10.0,
                                         fOscillationVelocityMax := 45,
                                         fOscillationRangeMin := 20.0,
                                         fOscillationRangeMax := 30.0,
                                         nNumberOfRowsMin := 1,
                                         nNumberOfRowsMax := 6);

    bErrorReturn : BOOL;
    sErrorStringReturn : T_MaxString;

    nWindow : INT;
    fRotationStartAngle : LREAL;
    fRotationStopAngle : LREAL;
    fOscillationVelocity : LREAL;
    fOscillationRange : LREAL;
    nNumberOfRows : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(__POUNAME());

// Test setup
fbSystemCalibrationTestDouble.SetIsCalibrated(bIsCalibrated := TRUE);
GetNominalValues(nWindow => nWindow,
                 fRotationStartAngle => fRotationStartAngle,
                 fRotationStopAngle => fRotationStopAngle,
                 fOscillationVelocity => fOscillationVelocity,
                 fOscillationRange => fOscillationRange,
                 nNumberOfRows => nNumberOfRows);

fbGridScanPoints.Save(nWindow := nWindow,
                      fRotationStartAngle := fRotationStartAngle,
                      fRotationStopAngle := fRotationStopAngle,
                      fOscillationVelocity := fOscillationVelocity,
                      fOscillationRange := fOscillationRange,
                      nNumberOfRows := nNumberOfRows,
                      bError => bErrorReturn,
                      sErrorString => sErrorStringReturn);

AssertFalse(Condition := bErrorReturn,
            Message := 'Expected save to be successful');

AssertEquals_STRING(Expected := '',
                    Actual := sErrorStringReturn,
                    Message := 'Expected string to be empty');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNominalValues" Id="{52cf28c2-0e85-48a6-9ba9-87a4542cd828}">
      <Declaration><![CDATA[METHOD PRIVATE GetNominalValues
VAR_OUTPUT
    nWindow : INT;
    fRotationStartAngle : LREAL;
    fRotationStopAngle : LREAL;
    fOscillationVelocity : LREAL;
    fOscillationRange : LREAL;
    nNumberOfRows : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nWindow := 3;
fRotationStartAngle := 0.0;
fRotationStopAngle := 90.0;
fOscillationVelocity := 10.0;
fOscillationRange := 20.0;
nNumberOfRows := 6;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenThatAllFourCornersHaveBeenSetExpectTheSystemToBeCalibrated" Id="{50a537b6-8469-4896-8a4d-c9a0cb049a9a}">
      <Declaration><![CDATA[
METHOD PRIVATE GivenThatAllFourCornersHaveBeenSetExpectTheSystemToBeCalibrated
VAR
    fbSystemCalibration : FB_SystemCalibration;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(__POUNAME());

fbSystemCalibration.SetLowerLeft(z := 1.0,
                                 x := 1.0,
                                 y := 1.0);

fbSystemCalibration.SetLowerRight(z := 1.0,
                                 x := 1.0,
                                 y := 1.0);

fbSystemCalibration.SetUpperLeft(z := 1.0,
                                 x := 1.0,
                                 y := 1.0);

fbSystemCalibration.SetUpperRight(z := 1.0,
                                 x := 1.0,
                                 y := 1.0);

AssertTrue(fbSystemCalibration.IsCalibrated(),
           Message := 'Expected system to be calibrated');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenThatAllThreeCornersHaveBeenSetExpectTheSystemNotToBeCalibrated" Id="{0beac0b6-ed08-4f09-b938-a9190a5c3602}">
      <Declaration><![CDATA[
METHOD PRIVATE GivenThatAllThreeCornersHaveBeenSetExpectTheSystemNotToBeCalibrated
VAR
    fbSystemCalibration : FB_SystemCalibration;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(__POUNAME());

fbSystemCalibration.SetLowerLeft(z := 1.0,
                                 x := 1.0,
                                 y := 1.0);

fbSystemCalibration.SetLowerRight(z := 1.0,
                                 x := 1.0,
                                 y := 1.0);

fbSystemCalibration.SetUpperLeft(z := 1.0,
                                 x := 1.0,
                                 y := 1.0);

AssertFalse(fbSystemCalibration.IsCalibrated(),
            Message := 'Expected system to not be calibrated');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenThatStartAngleIsNotWithinRangeDontAcceptSave" Id="{7be78981-1579-48f9-84b6-bec90f101ed0}">
      <Declaration><![CDATA[
METHOD PRIVATE GivenThatStartAngleIsNotWithinRangeDontAcceptSave
VAR
    fbSystemCalibrationTestDouble : FB_SystemCalibrationTestDouble;
    fbGridScanPoints : FB_GridScanPoints(iSystemCalibration := fbSystemCalibrationTestDouble,
                                         nWindowMin := 2,
                                         nWindowMax := 5,
                                         fRotationStartAngleMin := 0.0,
                                         fRotationStartAngleMax  := 90.0,
                                         fRotationStopAngleMin := 0.0,
                                         fRotationStopAngleMax := 90.0,
                                         fOscillationVelocityMin := 10.0,
                                         fOscillationVelocityMax := 45,
                                         fOscillationRangeMin := 20.0,
                                         fOscillationRangeMax := 30.0,
                                         nNumberOfRowsMin := 1,
                                         nNumberOfRowsMax := 6);

    bErrorReturn : BOOL;
    sErrorStringReturn : T_MaxString;

    nWindow : INT;
    fRotationStartAngle : LREAL;
    fRotationStopAngle : LREAL;
    fOscillationVelocity : LREAL;
    fOscillationRange : LREAL;
    nNumberOfRows : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(__POUNAME());

// Test setup
fbSystemCalibrationTestDouble.SetIsCalibrated(bIsCalibrated := TRUE);
GetNominalValues(nWindow => nWindow,
                 fRotationStartAngle => fRotationStartAngle,
                 fRotationStopAngle => fRotationStopAngle,
                 fOscillationVelocity => fOscillationVelocity,
                 fOscillationRange => fOscillationRange,
                 nNumberOfRows => nNumberOfRows);

fRotationStartAngle := 155.0;

fbGridScanPoints.Save(nWindow := nWindow,
                      fRotationStartAngle := fRotationStartAngle,
                      fRotationStopAngle := fRotationStopAngle,
                      fOscillationVelocity := fOscillationVelocity,
                      fOscillationRange := fOscillationRange,
                      nNumberOfRows := nNumberOfRows,
                      bError => bErrorReturn,
                      sErrorString => sErrorStringReturn);

AssertTrue(Condition := bErrorReturn,
           Message := 'Expected save to not be successful');

AssertTrue(Condition := sErrorStringReturn <> '',
           Message := 'Expected string to not be empty');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenThatSystemIsCalibratedAndClearOneIsSetExpectTheSystemNotToBeCalibrated" Id="{6d57e442-e00a-42eb-a6f4-2d7806532eab}">
      <Declaration><![CDATA[
METHOD PRIVATE GivenThatSystemIsCalibratedAndClearOneIsSetExpectTheSystemNotToBeCalibrated
VAR
    fbSystemCalibration : FB_SystemCalibration;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(__POUNAME());

fbSystemCalibration.SetLowerLeft(z := 1.0,
                                 x := 1.0,
                                 y := 1.0);

fbSystemCalibration.SetLowerRight(z := 1.0,
                                 x := 1.0,
                                 y := 1.0);

fbSystemCalibration.SetUpperLeft(z := 1.0,
                                 x := 1.0,
                                 y := 1.0);

fbSystemCalibration.SetUpperRight(z := 1.0,
                                 x := 1.0,
                                 y := 1.0);

fbSystemCalibration.ClearLowerLeft();

AssertFalse(fbSystemCalibration.IsCalibrated(),
            Message := 'Expected system to not be calibrated');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GivenThatSystemIsNotCalibratedDontAcceptSave" Id="{67dfc630-7fcf-48f7-937e-a5ee3cc5a204}">
      <Declaration><![CDATA[
METHOD PRIVATE GivenThatSystemIsNotCalibratedDontAcceptSave
VAR
    fbSystemCalibrationTestDouble : FB_SystemCalibrationTestDouble;
    fbGridScanPoints : FB_GridScanPoints(iSystemCalibration := fbSystemCalibrationTestDouble,
                                         nWindowMin := 2,
                                         nWindowMax := 5,
                                         fRotationStartAngleMin := 0.0,
                                         fRotationStartAngleMax  := 90.0,
                                         fRotationStopAngleMin := 0.0,
                                         fRotationStopAngleMax := 90.0,
                                         fOscillationVelocityMin := 10.0,
                                         fOscillationVelocityMax := 45,
                                         fOscillationRangeMin := 20.0,
                                         fOscillationRangeMax := 30.0,
                                         nNumberOfRowsMin := 1,
                                         nNumberOfRowsMax := 6);

    bErrorReturn : BOOL;
    sErrorStringReturn : T_MaxString;

    nWindow : INT;
    fRotationStartAngle : LREAL;
    fRotationStopAngle : LREAL;
    fOscillationVelocity : LREAL;
    fOscillationRange : LREAL;
    nNumberOfRows : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(__POUNAME());

// Test setup
fbSystemCalibrationTestDouble.SetIsCalibrated(bIsCalibrated := FALSE);
GetNominalValues(nWindow => nWindow,
                 fRotationStartAngle => fRotationStartAngle,
                 fRotationStopAngle => fRotationStopAngle,
                 fOscillationVelocity => fOscillationVelocity,
                 fOscillationRange => fOscillationRange,
                 nNumberOfRows => nNumberOfRows);

fbGridScanPoints.Save(nWindow := nWindow,
                      fRotationStartAngle := fRotationStartAngle,
                      fRotationStopAngle := fRotationStopAngle,
                      fOscillationVelocity := fOscillationVelocity,
                      fOscillationRange := fOscillationRange,
                      nNumberOfRows := nNumberOfRows,
                      bError => bErrorReturn,
                      sErrorString => sErrorStringReturn);

AssertTrue(Condition := bErrorReturn,
           Message := 'Expected save to not be successful');

AssertTrue(Condition := sErrorStringReturn <> '',
           Message := 'Expected string to not be empty');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>